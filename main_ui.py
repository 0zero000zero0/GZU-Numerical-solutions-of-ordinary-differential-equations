# Form implementation generated from reading ui file 'e:\python\final_assignment_for_numerical_analysis\main.ui'
#
# Created by: PyQt6 UI code generator 6.7.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from numerical_methods_for_ordinary_differential_equations import *
from PyQt6 import QtCore, QtGui, QtWidgets
import sys
import numpy as np
from PyQt6 import QtCore, QtWidgets
from matplotlib.figure import Figure
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas


class MplCanvas(FigureCanvas):
    def __init__(self, parent=None, width=5, height=4, dpi=100):
        fig = Figure(figsize=(width, height), dpi=dpi)
        self.axes = fig.add_subplot(111)
        super().__init__(fig)
        self.setParent(parent)

class Ui_BasicForm(object):
    def setupUi(self, BasicForm):
        BasicForm.setObjectName("BasicForm")
        self.BasicForm = BasicForm
        BasicForm.resize(931, 649)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(1)
        sizePolicy.setHeightForWidth(
            BasicForm.sizePolicy().hasHeightForWidth())
        BasicForm.setSizePolicy(sizePolicy)
        icon = QtGui.QIcon.fromTheme("applications-science")
        BasicForm.setWindowIcon(icon)
        self.options = QtWidgets.QWidget(parent=BasicForm)
        self.options.setGeometry(QtCore.QRect(9, 9, 913, 296))
        self.options.setStyleSheet("background-color:rgb(229, 229, 229)")
        self.options.setObjectName("options")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.options)
        self.horizontalLayout_7.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.widget = QtWidgets.QWidget(parent=self.options)
        self.widget.setObjectName("widget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.algorithm = QtWidgets.QWidget(parent=self.widget)
        self.algorithm.setObjectName("algorithm")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.algorithm)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.choose_algorithm = QtWidgets.QLabel(parent=self.algorithm)
        self.choose_algorithm.setEnabled(True)
        self.choose_algorithm.setWordWrap(True)
        self.choose_algorithm.setOpenExternalLinks(False)
        self.choose_algorithm.setTextInteractionFlags(
            QtCore.Qt.TextInteractionFlag.NoTextInteraction)
        self.choose_algorithm.setObjectName("choose_algorithm")
        self.horizontalLayout_2.addWidget(self.choose_algorithm)
        self.algorithms = QtWidgets.QComboBox(parent=self.algorithm)
        self.algorithms.setEditable(False)
        self.algorithms.setCurrentText("")
        self.algorithms.setInsertPolicy(
            QtWidgets.QComboBox.InsertPolicy.InsertAtTop)
        self.algorithms.setSizeAdjustPolicy(
            QtWidgets.QComboBox.SizeAdjustPolicy.AdjustToContentsOnFirstShow)
        self.algorithms.setMinimumContentsLength(0)
        self.algorithms.setPlaceholderText("请选择算法")
        self.algorithms.setDuplicatesEnabled(True)
        self.algorithms.setObjectName("algorithms")
        self.algorithms.addItem("")
        self.algorithms.addItem("")
        self.algorithms.addItem("")
        self.algorithms.addItem("")
        self.algorithms.addItem("")
        self.algorithms.addItem("")
        self.algorithms.addItem("")
        self.algorithms.addItem("")
        self.algorithms.addItem("")
        self.algorithms.addItem("")
        self.algorithms.addItem("")
        self.algorithms.addItem("")
        self.horizontalLayout_2.addWidget(self.algorithms)
        self.horizontalLayout_2.setStretch(0, 1)
        self.horizontalLayout_2.setStretch(1, 3)
        self.verticalLayout.addWidget(self.algorithm)
        self.low_limit = QtWidgets.QWidget(parent=self.widget)
        self.low_limit.setObjectName("low_limit")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.low_limit)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.choose_algorithm_2 = QtWidgets.QLabel(parent=self.low_limit)
        self.choose_algorithm_2.setWordWrap(True)
        self.choose_algorithm_2.setOpenExternalLinks(False)
        self.choose_algorithm_2.setTextInteractionFlags(
            QtCore.Qt.TextInteractionFlag.NoTextInteraction)
        self.choose_algorithm_2.setObjectName("choose_algorithm_2")
        self.horizontalLayout_3.addWidget(self.choose_algorithm_2)
        self.input_2 = QtWidgets.QLineEdit(parent=self.low_limit)
        self.input_2.setObjectName("input_2")
        self.horizontalLayout_3.addWidget(self.input_2)
        self.horizontalLayout_3.setStretch(0, 1)
        self.horizontalLayout_3.setStretch(1, 2)
        self.verticalLayout.addWidget(self.low_limit)
        self.up_limit = QtWidgets.QWidget(parent=self.widget)
        self.up_limit.setObjectName("up_limit")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.up_limit)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.choose_algorithm_3 = QtWidgets.QLabel(parent=self.up_limit)
        self.choose_algorithm_3.setWordWrap(True)
        self.choose_algorithm_3.setOpenExternalLinks(False)
        self.choose_algorithm_3.setTextInteractionFlags(
            QtCore.Qt.TextInteractionFlag.NoTextInteraction)
        self.choose_algorithm_3.setObjectName("choose_algorithm_3")
        self.horizontalLayout_4.addWidget(self.choose_algorithm_3)
        self.input_3 = QtWidgets.QLineEdit(parent=self.up_limit)
        self.input_3.setObjectName("input_3")
        self.horizontalLayout_4.addWidget(self.input_3)
        self.horizontalLayout_4.setStretch(0, 1)
        self.horizontalLayout_4.setStretch(1, 2)
        self.verticalLayout.addWidget(self.up_limit)
        self.step = QtWidgets.QWidget(parent=self.widget)
        self.step.setObjectName("step")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.step)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.choose_algorithm_4 = QtWidgets.QLabel(parent=self.step)
        self.choose_algorithm_4.setWordWrap(True)
        self.choose_algorithm_4.setOpenExternalLinks(False)
        self.choose_algorithm_4.setTextInteractionFlags(
            QtCore.Qt.TextInteractionFlag.NoTextInteraction)
        self.choose_algorithm_4.setObjectName("choose_algorithm_4")
        self.horizontalLayout_5.addWidget(self.choose_algorithm_4)
        self.please_input = QtWidgets.QMessageBox(parent=self.step)
        self.input_4 = QtWidgets.QLineEdit(parent=self.step)
        self.input_4.setText("")
        self.input_4.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.input_4.setPlaceholderText("请输入正整数")
        self.input_4.setObjectName("input_4")
        self.horizontalLayout_5.addWidget(self.input_4)
        self.horizontalLayout_5.setStretch(0, 1)
        self.horizontalLayout_5.setStretch(1, 3)
        self.verticalLayout.addWidget(self.step)
        self.horizontalLayout_7.addWidget(self.widget)
        self.widget_3 = QtWidgets.QWidget(parent=self.options)
        self.widget_3.setObjectName("widget_3")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.widget_3)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.initial_value = QtWidgets.QWidget(parent=self.widget_3)
        self.initial_value.setObjectName("initial_value")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.initial_value)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.choose_algorithm_5 = QtWidgets.QLabel(parent=self.initial_value)
        self.choose_algorithm_5.setWordWrap(True)
        self.choose_algorithm_5.setOpenExternalLinks(False)
        self.choose_algorithm_5.setTextInteractionFlags(
            QtCore.Qt.TextInteractionFlag.NoTextInteraction)
        self.choose_algorithm_5.setObjectName("choose_algorithm_5")
        self.horizontalLayout_6.addWidget(self.choose_algorithm_5)
        self.input = QtWidgets.QLineEdit(parent=self.initial_value)
        self.input.setText("")
        self.input.setPlaceholderText("如果是多步法，请使用英文空格隔开")
        self.input.setObjectName("input")
        self.horizontalLayout_6.addWidget(self.input)
        self.verticalLayout_2.addWidget(self.initial_value)
        self.frame = QtWidgets.QFrame(parent=self.widget_3)
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.frame)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.plainTextEdit_2 = QtWidgets.QPlainTextEdit(parent=self.frame)
        self.plainTextEdit_2.setObjectName("plainTextEdit_2")
        self.horizontalLayout.addWidget(self.plainTextEdit_2)
        self.fun = QtWidgets.QPlainTextEdit(parent=self.frame)
        self.fun.setPlaceholderText("请输入f(x,y)")
        self.fun.setObjectName("fun")
        self.horizontalLayout.addWidget(self.fun)
        self.horizontalLayout.setStretch(1, 1)
        self.verticalLayout_2.addWidget(self.frame)
        self.horizontalLayout_7.addWidget(self.widget_3)
        self.widget_2 = QtWidgets.QWidget(parent=self.options)
        self.widget_2.setObjectName("widget_2")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.widget_2)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.apply = QtWidgets.QPushButton(parent=self.widget_2)
        self.apply.setObjectName("apply")
        self.verticalLayout_3.addWidget(self.apply)
        self.empty = QtWidgets.QPushButton(parent=self.widget_2)
        self.empty.setObjectName("empty")
        self.verticalLayout_3.addWidget(self.empty)
        self.quit = QtWidgets.QPushButton(parent=self.widget_2)
        self.quit.setObjectName("quit")
        self.verticalLayout_3.addWidget(self.quit)
        self.horizontalLayout_7.addWidget(self.widget_2)
        self.horizontalLayout_7.setStretch(0, 3)
        self.horizontalLayout_7.setStretch(1, 6)
        self.horizontalLayout_7.setStretch(2, 1)
        self.frame_2 = QtWidgets.QFrame(parent=BasicForm)
        self.frame_2.setGeometry(QtCore.QRect(10, 310, 911, 331))
        self.frame_2.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_2.setObjectName("frame_2")
        self.retranslateUi(BasicForm)
        QtCore.QMetaObject.connectSlotsByName(BasicForm)
        self.apply.clicked.connect(self.apply_clicked)
        self.empty.clicked.connect(self.emptize)

    def retranslateUi(self, BasicForm):
        _translate = QtCore.QCoreApplication.translate
        BasicForm.setWindowTitle(_translate("BasicForm", "常微分方程数值解"))
        self.choose_algorithm.setText(_translate("BasicForm", "算法:"))
        self.algorithms.setItemText(0, _translate("BasicForm", "前向欧拉法"))
        self.algorithms.setItemText(1, _translate("BasicForm", "后退欧拉法"))
        self.algorithms.setItemText(2, _translate("BasicForm", "欧拉法:预测-校正系统"))
        self.algorithms.setItemText(3, _translate("BasicForm", "梯形法"))
        self.algorithms.setItemText(4, _translate("BasicForm", "梯形法:预测-校正系统"))
        self.algorithms.setItemText(5, _translate("BasicForm", "Simpson法"))
        self.algorithms.setItemText(
            6, _translate("BasicForm", "四阶Runge-Kutta法"))
        self.algorithms.setItemText(7, _translate("BasicForm", "Adams显式求解公式"))
        self.algorithms.setItemText(8, _translate("BasicForm", "Adams隐式求解公式"))
        self.algorithms.setItemText(
            9, _translate("BasicForm", "Adams法:预测矫正系统"))
        self.algorithms.setItemText(10, _translate("BasicForm", "Milne法"))
        self.algorithms.setItemText(
            11, _translate("BasicForm", "Milne法:预测-矫正系统"))
        self.choose_algorithm_2.setText(_translate("BasicForm", "起点集(使用空格分割)"))
        self.choose_algorithm_3.setText(_translate("BasicForm", "终点"))
        self.choose_algorithm_4.setText(_translate("BasicForm", "步长:"))
        self.choose_algorithm_5.setText(_translate("BasicForm", "初值(y)"))
        self.plainTextEdit_2.setPlainText(_translate("BasicForm", "常微分方程:y\'=f(x,y)\n"
                                                     "使用Python语法\n"
                                                     "加 +\n"
                                                     "减 -\n"
                                                     "乘 *\n"
                                                     "除 /\n"
                                                     "次方 a^b=power(a,b)\n"
                                                     "指数 exp\n"
                                                     "三角函数 sin/cos\n"
                                                     "对数 log"))
        self.apply.setText(_translate("BasicForm", "应用"))
        self.empty.setText(_translate("BasicForm", "清空"))
        self.quit.setText(_translate("BasicForm", "退出"))
    def emptize(self):
        self.input.clear()
        self.input_2.clear()
        self.input_3.clear()
        self.input_4.clear()
        self.fun.clear()
        # self.plainTextEdit_2.clear()
        self.frame_2.close()

    def create_function(self):
        expression = self.fun.toPlainText().strip()
        try:
            # 定义函数字符串
            function_str = f"def f(x,y): return {expression}"
            # 在局部命名空间中执行函数字符串定义函数
            local_vars = {
                "exp": exp,
                "power": power,
                "cos": cos,
                "sin": sin,
                "log": log,
            }
            exec(
                function_str,
                {
                    "np": np,
                    "exp": exp,
                    "power": power,
                    "cos": cos,
                    "sin": sin,
                    "log": log,
                },
                local_vars,
            )
            # 从局部命名空间中获取函数对象
            func = local_vars["f"]
            return func
        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "错误", f"生成函数时出错: {e}")

    def apply_clicked(self):
        algorithm = self.algorithms.currentText()
        x0 = self.input_2.text()
        x_end = self.input_3.text()
        h = self.input_4.text()
        y0 = self.input.text()
        f = self.create_function()
        if x0 == "" or x_end == "" or h == "" or y0 == "":
            self.please_input.setText("请输入全部条件")
            self.please_input.show()
            return None
        else:
            x_end = int(x_end)
            h = float(h)
            if len(y0) > 1:
                y0 = [float(i) for i in y0.split()]
                x0 = [float(i) for i in x0.split()]
            else:
                x0 = int(x0)
                y0 = int(y0)
        if algorithm == "前向欧拉法":
            x, y = forward_euler(f, y0, x0, x_end, h)
        elif algorithm == "后退欧拉法":
            x, y = backward_euler(f, y0, x0, x_end, h)
        elif algorithm == '欧拉法:预测-校正系统':
            x, y = euler_predict_correct(f, y0, x0, x_end, h)
        elif algorithm == '梯形法':
            x, y = trapezoidal_method(f, y0, x0, x_end, h)
        elif algorithm == '梯形法:预测-校正系统':
            x, y = trapezoidal_predict_correct(f, y0, x0, x_end, h)
        elif algorithm == 'Simpson法':
            x, y = simpson_method(f, y0, x0, x_end, h)
        elif algorithm == '四阶Runge-Kutta法':
            x, y = runge_Kutta(f, y0, x0, x_end, h)
        elif algorithm == 'Adams显式求解公式':
            x, y = adams_explicit(f, y0, x0, x_end, h)
        elif algorithm == 'Adams隐式求解公式':
            x, y = adams_implicit(f, y0, x0, x_end, h)
        elif algorithm == 'Adams法:预测矫正系统':
            x, y = adams_predict_correct(f, y0, x0, x_end, h)
        elif algorithm == 'Milne法':
            x, y = milne_method(f, y0, x0, x_end, h)
        elif algorithm == 'Milne法:预测-矫正系统':
            x, y = milne_predict_correct(f, y0, x0, x_end, h)
        else:
            self.please_input.setText("请选择算法")
            self.please_input.show()
            return
        self.x = x
        self.y = y
        print(f"{len(self.x)=},{len(self.y)=}")
        self.plot_to_frame()
        self.retranslateUi(self.BasicForm)


    def plot_to_frame(self):
        if hasattr(self, 'sc'):
            self.frame_2.layout().removeWidget(self.sc)
            self.sc.setParent(None)
        self.sc = MplCanvas(self.frame_2, width=9, height=3.3, dpi=100)
        self.sc.axes.plot(self.x, self.y)
        if self.frame_2.layout() is None:
            layout = QtWidgets.QVBoxLayout(self.frame_2)
            layout.addWidget(self.sc)
        else:
            self.frame_2.layout().addWidget(self.sc)
        self.sc.draw()
